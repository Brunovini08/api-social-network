// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  photo     String?
  createdAt DateTime     @default(now())
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  friendship            Friendship[] @relation("FriendshipUser1")
  friendshipOtherPeople Friendship[] @relation("FriendshipUser2")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  imageUrl  String
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Friendship {
  id        String   @id @default(uuid())
  userId1   String
  userId2   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1 User @relation("FriendshipUser1", fields: [userId1], references: [id])
  user2 User @relation("FriendshipUser2", fields: [userId2], references: [id])
}
